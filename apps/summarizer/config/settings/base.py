"""
Django settings for summarizer project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import django
import os
import pytz
import sys
from datetime import timedelta
from django.urls import reverse_lazy
from django.utils.translation import gettext
django.utils.translation.ugettext = gettext

# Build paths inside the project like this: BASE_DIR / 'subdir'.
PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
BASE_DIR = os.path.join(PROJECT_DIR, 'summarizer')
sys.path.insert(0, PROJECT_DIR)
sys.path.insert(0, BASE_DIR)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ev+2vcmrgk&@v@y5u%(y#kc&u=ab#qm!0_vv&(bms*po(twnry'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
  'django.contrib.admin',
  'django.contrib.auth',
  'django.contrib.contenttypes',
  'django.contrib.sessions',
  'django.contrib.messages',
  'django.contrib.staticfiles',

  'django_celery_beat',

  'channels',
  'graphene_django',
  'graphql_jwt.refresh_token.apps.RefreshTokenConfig',

  'allauth',
  'allauth.account',
  'allauth.socialaccount',
  'allauth.socialaccount.providers.google',
  'allauth.socialaccount.providers.twitter',
  # 'allauth.socialaccount.providers.twitter_oauth2',

  'core',
  'user',
  'simple_history',
]

MIDDLEWARE = [
  'corsheaders.middleware.CorsMiddleware',
  'django.middleware.security.SecurityMiddleware',
  'django.contrib.sessions.middleware.SessionMiddleware',
  'django.middleware.common.CommonMiddleware',
  'django.middleware.csrf.CsrfViewMiddleware',
  'django.contrib.auth.middleware.AuthenticationMiddleware',
  'django.contrib.messages.middleware.MessageMiddleware',
  'django.middleware.clickjacking.XFrameOptionsMiddleware',

  'allauth.account.middleware.AccountMiddleware',
  'simple_history.middleware.HistoryRequestMiddleware'
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
  {
    'BACKEND': 'django.template.backends.django.DjangoTemplates',
    'DIRS': [
      f'{BASE_DIR}/templates',
    ],
    'APP_DIRS': True,
    'OPTIONS': {
      'context_processors': [
        'django.template.context_processors.debug',
        'django.template.context_processors.request',
        'django.contrib.auth.context_processors.auth',
        'django.contrib.messages.context_processors.messages',
      ],
    },
  },
]

ASGI_APPLICATION = 'config.asgi.application'
WSGI_APPLICATION = 'config.wsgi.application'


GRAPHENE = {
  'SCHEMA': 'config.schema.schema',
  'MIDDLEWARE': [
    'graphql_jwt.middleware.JSONWebTokenMiddleware',
    'user.middleware.AuthCheckIat'
  ],
}
REVOKE_GRAPHENE_JWT_ON_START = False
# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
  'default': {
    'ENGINE': 'django.db.backends.postgresql',
    'NAME': os.getenv('POSTGRES_DB'),
    'USER': os.getenv('POSTGRES_USER'),
    'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
    'HOST': os.getenv('POSTGRES_HOST'),
    'PORT': os.getenv('POSTGRES_PORT'),
  }
}

CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
  'http://127.0.0.1:3000',
  'http://127.0.0.1:3001',
  'http://127.0.0.1:8000',
  'http://127.0.0.1:8001',
  'http://127.0.0.1:8002',
  'http://127.0.0.1:8008',
]
CSRF_TRUSTED_ORIGINS = [
  'http://127.0.0.1:3000',
  'http://127.0.0.1:3001',
  'http://127.0.0.1:8000',
  'http://127.0.0.1:8001',
  'http://127.0.0.1:8002',
  'http://127.0.0.1:8008',
]
# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

# AUTH_PASSWORD_VALIDATORS = [
#   {
#     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
#   },
#   {
#     'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
#   },
#   {
#     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
#   },
#   {
#     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
#   },
# ]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'
ALL_TIMEZONES = [[timezone, timezone] for timezone in pytz.all_timezones]

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
  'version': 1,
  'disable_existing_loggers': False,
  'formatters': {
    'simple': {
      'format': '%(levelname)s %(asctime)s %(name)s.%(funcName)s:%(lineno)s- %(message)s'
    },
  },
  'handlers': {
    'console': {
      'level': 'DEBUG',
      'class': 'logging.StreamHandler',
      'formatter': 'simple'
    },
    'celery': {
      'level': 'DEBUG',
      'class': 'logging.handlers.RotatingFileHandler',
      'filename': 'logs/celery.log',
      'formatter': 'simple',
      'maxBytes': 1024 * 1024 * 100,  # 100 mb
    },
    'file_django': {
      'level': 'DEBUG',
      'class': 'logging.handlers.RotatingFileHandler',
      'filename': 'logs/django_error.log',
      'formatter': 'simple',
    },
    'file_daphne': {
      'level': 'DEBUG',
      'class': 'logging.handlers.RotatingFileHandler',
      'filename': 'logs/daphne_error.log',
      'formatter': 'simple',
    }
  },
  'loggers': {
    'django': {
      'handlers': ['file_django'],
      'level': 'DEBUG',
      'propagate': True,
    },
    'celery': {
      'handlers': ['celery', 'console'],
      'level': 'DEBUG',
    },
    'daphne': {
      'handlers': ['file_daphne'],
      'level': 'DEBUG'
    },
  },
}

REDIS_HOST = os.getenv('REDIS_HOST')
REDIS_PORT = os.getenv('REDIS_PORT')
REDIS_PASSWORD = os.getenv('REDIS_PASSWORD')
REDIS_DATABASE = os.getenv('REDIS_DATABASE')
REDIS_ADDRESS = f'redis://:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_PORT}/{REDIS_DATABASE}'

CACHES = {
  'default': {
    'BACKEND': 'django_redis.cache.RedisCache',
    'LOCATION': REDIS_ADDRESS,
    'OPTIONS': {
      'CLIENT_CLASS': 'django_redis.client.DefaultClient',
      'PASSWORD': REDIS_PASSWORD
    },
    'KEY_PREFIX': 'cache_'
  }
}

CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_BROKER_URL = REDIS_ADDRESS

CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

CHANNEL_LAYERS = {
  'default': {
    'BACKEND': 'channels_redis.core.RedisChannelLayer',
    'CONFIG': {
      'hosts': [REDIS_ADDRESS],
    },
  },
}

AUTH_USER_MODEL = 'user.User'
AUTHENTICATION_BACKENDS = [
  'graphql_jwt.backends.JSONWebTokenBackend',
  # Needed to login by username in Django admin, regardless of `allauth`
  'django.contrib.auth.backends.ModelBackend',
  # `allauth` specific authentication methods, such as login by e-mail
  'allauth.account.auth_backends.AuthenticationBackend',
]


GRAPHQL_JWT = {
  'JWT_VERIFY_EXPIRATION': True,
  'JWT_EXPIRATION_DELTA': timedelta(days=30),
  'JWT_REFRESH_EXPIRATION_DELTA': timedelta(days=7),
}

# django allauth
SITE_ID = 3

ACCOUNT_FORMS = {'signup': 'user.forms.SignUpForm'}
# django allauth
ACCOUNT_ADAPTER = 'user.adapters.CustomAccountAdapter'
ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
# ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = False
ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'http'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_LOGOUT_ON_GET = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = False  # True maybe
ACCOUNT_PREVENT_ENUMERATION = False
ACCOUNT_SESSION_REMEMBER = True
ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = False
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = False
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3

# ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = reverse_lazy('profile:login_verify')
# ACCOUNT_SIGNUP_FORM_CLASS='user.forms.CustomSocialSignupForm'
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 20
ACCOUNT_SIGNUP_REDIRECT_URL = 'http://127.0.0.1:3000/user/settings'
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = 'https://mooncoinflip.com'
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = 'https://mooncoinflip.com'
SOCIALACCOUNT_ADAPTER = 'user.adapters.SocialAccountAdapter'
SOCIALACCOUNT_QUERY_EMAIL = True
# SOCIALACCOUNT_FORMS = {
#   'signup': 'user.forms.CustomSocialSignupForm'
# }
SOCIALACCOUNT_LOGIN_ON_GET = True
SOCIALACCOUNT_OPENID_CONNECT_URL_PREFIX = ''
SOCIALACCOUNT_EMAIL_VERIFICATION = 'optional'
SOCIALACCOUNT_ACCOUNT_EMAIL_REQUIRED = False
SOCIALACCOUNT_PROVIDERS = {
  'google': {
    'SCOPE': [
      'profile',
      'email',
    ],
    'AUTH_PARAMS': {
      'access_type': 'online',
    }
  },
  'github': {
    'SCOPE': [
      'user:email',
      'read:user'
    ]
  },
  'instagram': {
    'SCOPE': ['user_profile'],
  }
}

BACKEND_URL = os.getenv('BACKEND_URL')
FRONTEND_URL = os.getenv('FRONTEND_URL')
SITE_NAME = os.getenv('SITE_NAME')
SUPPORT_EMAIL = os.getenv('SUPPORT_EMAIL')

RECAPTCHA_SECRET_KEY = os.getenv('RECAPTCHA_SECRET_KEY')

EMAIL_PRIMARY_COLOR = '#ffb514'
EMAIL_PRIMARY_TEXT_COLOR = '#ffffff'
EMAIL_SECONDARY_COLOR = '#ffb514'
EMAIL_SECONDARY_TEXT_COLOR = '#ffffff'
EMAIL_LOGO_URL = 'https://upload.wikimedia.org/wikipedia/commons/thumb/7/77/Google_Images_2015_logo.svg/1024px-Google_Images_2015_logo.svg.png'

